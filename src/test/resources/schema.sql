DROP TABLE IF EXISTS tasks;
DROP TABLE IF EXISTS sprints;
DROP TABLE IF EXISTS projects;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS roles;

-- Roles table
CREATE TABLE roles
(
    id   BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255)
);

-- Users table
CREATE TABLE users
(
    id       BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email    VARCHAR(255),
    password VARCHAR(255),
    username VARCHAR(255),
    role_id  BIGINT,
    CONSTRAINT FK_user_role FOREIGN KEY (role_id) REFERENCES roles (id)
);

-- Projects table
CREATE TABLE projects
(
    id          BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name        VARCHAR(255),
    description VARCHAR(255),
    owner_id    BIGINT NOT NULL,
    CONSTRAINT fk_project_owner FOREIGN KEY (owner_id) REFERENCES users (id)
);

-- Sprints table
CREATE TABLE sprints
(
    id          BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name        VARCHAR(255),
    project_id  BIGINT NOT NULL,
    description TEXT,
    start_date  DATE   NOT NULL,
    end_date    DATE   NOT NULL,
    CONSTRAINT fk_sprint_project FOREIGN KEY (project_id) REFERENCES projects (id)
);

-- Tasks table
CREATE TABLE tasks
(
    id          BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name        VARCHAR(255) NOT NULL,
    description VARCHAR(255),
    sprint_id   BIGINT       NOT NULL,
    due_date    DATE,
    status      INT,
    title       VARCHAR(255),
    assignee_id BIGINT,
    CONSTRAINT UK_task_assignee UNIQUE (assignee_id),
    CONSTRAINT FK_task_assignee FOREIGN KEY (assignee_id) REFERENCES users (id),
    CONSTRAINT fk_task_sprint FOREIGN KEY (sprint_id) REFERENCES sprints (id)
);
